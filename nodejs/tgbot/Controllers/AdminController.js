'use strict';

const Telegram = require('telegram-node-bot');
const TelegramBaseController = Telegram.TelegramBaseController;
const emoji = require('node-emoji');

class AdminController extends TelegramBaseController {

    constructor(Powers) {
        super();

        this.powers   = Powers;
        this.ghostApi = this.powers.ghostApi;
    }


    transHandle($) {

        let responseQiwiTransaction = () => {
            return this.ghostApi.api('admin/qiwi-transaction', 'GET').then(response => {
                var message = '–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10-—Ç–∏ qiwi —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n';

                response.data.forEach((item, index) => {
                    let provider = item.provider.trim().replace(/[\s]{2,}/g, ' ');

                    message += `${++index}) Qiwi ID: ${item.qiwi_id}\n`;
                    message += `–ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}\n`;
                    message += `–ö–æ–º–º–µ–Ω—Ç: ${item.comment ? item.comment : '–Ω–µ—Ç—É'}\n`;
                    message += `–°—É–º–º–∞: ${item.amount}\n`;
                    message += `–î–∞—Ç–∞: ${item.qiwi_date}\n`;
                    message += `${'-'.repeat(item.qiwi_date.length * 2)}\n`;
                });

                if (!response.data) {
                    message += '–ù–µ—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π';
                }

                $.sendMessage(message);
            });
        };

        return responseQiwiTransaction();
    }

    goodsPriceHandle($) {

        let responseGoodsPrice = () => {
            return this.ghostApi.api('admin/goods-price').then(response => {

                if (!Object.keys(response.data).length) {
                    return $.sendMessage('–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç—É');
                }

                var goodsSession = new Map();
                var goodsIndex = 0;

                var message = '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º\n\n';

                for (let city in response.data) {
                    message += `üè° ${city}\n`;

                    for (let goodsName in response.data[city]) {
                        message += `  üçó ${goodsName}\n`;

                        let goodsWeights = Object.keys(response.data[city][goodsName]);

                        goodsWeights.forEach((goodsWeight, index) => {
                            message += `  ‚öñ ${goodsWeight}\n`;

                            let goodsItems = response.data[city][goodsName][goodsWeight];

                            goodsItems.forEach((goods, index) => {
                                message += `${++goodsIndex}) ${goods.weight}, ${goods.address}\n`;

                                goodsSession.set(goodsIndex, goods.id);
                            })
                        })

                    }
                }

                $.userSession.goodsPrice = goodsSession;

                $.sendMessage(message);
            })
        };

        return responseGoodsPrice();
    }

    goodsPurchase($) {

        let parchase = () => {

            let goodsPriceIds = $.query.arg1.split(',').map((item, index) => {
                return $.userSession.goodsPrice.get(parseInt(item));
            });

            return this.ghostApi.api('admin/goods-price/purchase', 'POST', {
                goods_price_id: goodsPriceIds.join(',')
            }).then(response => {
                response.data.forEach((item, index) => {
                    let message = `${++index}) ‚öñ ${item.weight}, ${item.address}`;

                    $.sendMessage(message)
                })
            });
        };

        return parchase();
    }

    goodsPriceAvailableHandle($) {

        let responseGoodsAvailable = () => {
            this.ghostApi.api('admin/goods-price/available').then(response => {

                if (!Object.keys(response.data).length) {
                    return $.sendMessage('–í –Ω–∞–ª–∏—á–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç');
                }

                var message = '–¢–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏\n\n';

                let cities = Object.keys(response.data);

                for (let city of cities) {
                    message += `üè° ${city}\n`;

                    let goodsTypes = Object.keys(response.data[city]);

                    for (let goodsType of goodsTypes) {
                        message += `  üçó ${goodsType}\n`;

                        let weights = Object.keys(response.data[city][goodsType]);

                        for (let weight of weights) {
                            message += `  ‚öñ ${weight} - ${response.data[city][goodsType][weight]}\n`;
                        }
                    }
                }

                $.sendMessage(message);

            }).catch(console.log)
        };

        return responseGoodsAvailable();
    }

    adminHelpHandle($) {

        let responseHelpMessage = () => {
            let message = '–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n';

            message += '/—Ç—Ä–∞–Ω—Å - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10-—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫—É\n';
            message += '/—Ç–æ–≤–∞—Ä - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º\n';
            message += '/—Ç–æ–≤–∞—Ä –≤–∑—è—Ç—å {–Ω–æ–º–µ—Ä} - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ –Ω–æ–º–µ—Ä—É (–±–µ–∑ —Å–∫–æ–±–æ–∫), —É–¥–∞–ª—è—è –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä. –î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤, –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é 1,2,3\n';
            message += '/–Ω–∞–ª–∏—á–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º\n';
            message += '/–∫–æ—à - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –±–∞–ª–∞–Ω—Å, –ø–æ–º–µ—á–µ–Ω–Ω—ã–π –≥–∞–ª–æ—á–∫–æ–π, —Ç–µ–∫—É—â–∏–π\n';
            message += '/–∫–æ—à –≤—ã–±—Ä–∞—Ç—å {–Ω–æ–º–µ—Ä} - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å—Ä–µ–¥—Å—Ç–≤\n';
            message += '/–∞–¥–º–∏–Ω –ø–æ–º–æ—â—å - –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n';

            $.sendMessage(message);
        };

        return responseHelpMessage();
    }

    purseHandle($) {

        let responsePurseList = () => {
            this.ghostApi.api('admin/purse').then(response => {

                if (!response.data.length) {
                    return $.sendMessage('–ù–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤');
                }

                var purseSession = new Map();
                var message = '–°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –±–∞–ª–∞–Ω—Å\n';

                response.data.forEach((item, index) => {
                    message += `${++index}) ${item.selected == 1 ? emoji.emojify(':white_check_mark:') : ''} ${item.phone} `;
                    message += `${emoji.emojify(':dollar:')} ${item.balance}\n`;

                    purseSession.set(index, item.id);
                });

                $.userSession.purse = purseSession;

                $.sendMessage(message);
            });
        };

        return responsePurseList();
    }

    purseSelectHandle($) {

        let changePurse = () => {
            let id = $.userSession.purse.get(parseInt($.query.arg1));

            if (!id) {
                return $.sendMessage('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
            }

            return this.ghostApi.api('admin/purse/set', 'POST', {
                id
            }).then(response => {
                return $.sendMessage('–ö–æ—à–µ–ª–µ–∫ –∏–∑–º–µ–Ω–µ–Ω');
            });
        };

        return changePurse();
    }

    get routes() {
        return {
            '/—Ç—Ä–∞–Ω—Å': 'transHandle',
            '/—Ç–æ–≤–∞—Ä': 'goodsPriceHandle',
            '/—Ç–æ–≤–∞—Ä –≤–∑—è—Ç—å :arg1': 'goodsPurchase',
            '/–Ω–∞–ª–∏—á–∏–µ': 'goodsPriceAvailableHandle',
            '/–∞–¥–º–∏–Ω –ø–æ–º–æ—â—å': 'adminHelpHandle',
            '/–∫–æ—à': 'purseHandle',
            '/–∫–æ—à –≤—ã–±—Ä–∞—Ç—å :arg1': 'purseSelectHandle'
        };
    }
}

module.exports = AdminController;